// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

let Js_dict = require("@rescript/runtime/lib/js/Js_dict.js");
let Stdlib_List = require("@rescript/runtime/lib/js/Stdlib_List.js");
let Stdlib_Array = require("@rescript/runtime/lib/js/Stdlib_Array.js");
let Primitive_option = require("@rescript/runtime/lib/js/Primitive_option.js");

function array(encode) {
  return arr => arr.map(x => encode(x));
}

function list(encode) {
  return l => {
    if (l === 0) {
      return [];
    }
    let arr = Stdlib_Array.make(Stdlib_List.length(l), encode(l.hd));
    let _i = 1;
    let _l = l.tl;
    while (true) {
      let l$1 = _l;
      let i = _i;
      if (l$1 === 0) {
        return arr;
      }
      arr[i] = encode(l$1.hd);
      _l = l$1.tl;
      _i = i + 1 | 0;
      continue;
    };
  };
}

let object = Js_dict.fromArray;

function option(encode) {
  return opt => {
    if (opt !== undefined) {
      return encode(Primitive_option.valFromOption(opt));
    } else {
      return null;
    }
  };
}

function withDefault($$default, encode, opt) {
  if (opt !== undefined) {
    return encode(Primitive_option.valFromOption(opt));
  } else {
    return $$default;
  }
}

function date(date$1) {
  return date$1.toJSON();
}

function pair(encodeA, encodeB, param) {
  return [
    encodeA(param[0]),
    encodeB(param[1])
  ];
}

function tuple2(encodeA, encodeB, param) {
  return [
    encodeA(param[0]),
    encodeB(param[1])
  ];
}

function tuple3(encodeA, encodeB, encodeC, param) {
  return [
    encodeA(param[0]),
    encodeB(param[1]),
    encodeC(param[2])
  ];
}

function tuple4(encodeA, encodeB, encodeC, encodeD, param) {
  return [
    encodeA(param[0]),
    encodeB(param[1]),
    encodeC(param[2]),
    encodeD(param[3])
  ];
}

function dict(encode, dict$1) {
  return Js_dict.map(v => encode(v), dict$1);
}

let Unsafe = {};

exports.array = array;
exports.list = list;
exports.object = object;
exports.option = option;
exports.withDefault = withDefault;
exports.date = date;
exports.pair = pair;
exports.tuple2 = tuple2;
exports.tuple3 = tuple3;
exports.tuple4 = tuple4;
exports.dict = dict;
exports.Unsafe = Unsafe;
/* No side effect */
